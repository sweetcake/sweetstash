// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;
namespace Core
{
	public static class EnumUtil 
	{
		public static List<T> GetValues<T>(List<T> ignoreList = null) 
		{
			List<T> tempValues = new List<T>((T[])Enum.GetValues(typeof(T)));
			if(ignoreList == null || ignoreList.Count == 0 || ignoreList.Count >= tempValues.Count)
			{
				return tempValues;
			}

			List<T> values = new List<T>(tempValues.Count - ignoreList.Count);
			foreach(T value in tempValues)
			{
				if(!ignoreList.Contains(value))
				{
					values.Add(value);
				}
			}

			return values;
		}

		public static T GetRandomEnumValue<T>()
		{
			List<T> values = GetValues<T>();
			return values[UnityEngine.Random.Range(0, values.Count)];
		}

		public static T GetLastEnumValue<T>()
		{
			List<T> values = GetValues<T>();
			return values[values.Count - 1];
		}

		public static int GetEnumLength<T>()
		{
			return GetValues<T>().Count;
		}

		public static T StringToEnum<T>(string stringValue, T defaultValue)
		{
			foreach (T enumValue in GetValues<T>())
			{
				if (enumValue.ToString().CompareTo(stringValue) == 0)
					return enumValue;
			}

			return defaultValue;
		}
	}
}


