// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;

namespace Core
{
	public static class DateUtils
	{
		/// <summary>
		/// Returns a unix timestamp
		/// </summary>
		/// <returns>The timestamp.</returns>
		public static long GetTimestamp()
		{
			return (long)(DateTime.UtcNow - UnixEpoch).TotalSeconds;
		}

		/// <summary>
		/// Returns date from for the next instance of dayOfTheWeek
		/// </summary>
		/// <param name="from">From.</param>
		/// <param name="dayOfWeek">Day of week.</param>
		public static DateTime NextDay(DateTime from, DayOfWeek dayOfWeek)
		{
			int start = (int)from.DayOfWeek;
			int target = (int)dayOfWeek;
			if (target <= start)
				target += 7;
			return from.AddDays(target - start);
		}

		/// <summary>
		/// Standard unix epoch
		/// </summary>
		/// <value>The unix epoch.</value>
		public static DateTime UnixEpoch
		{
			get 
			{
				return new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
			}
		}

		/// <summary>
		/// Returns a DateTime object for a given unix timestamp
		/// </summary>
		/// <returns>The timestamp.</returns>
		/// <param name="timestamp">Timestamp.</param>
		public static DateTime FromTimestamp(long timestamp)
		{
			return UnixEpoch.AddSeconds(timestamp);
		}

		/// <summary>
		/// Converts dt to unix timestamp, will work as long as date time is utc
		/// </summary>
		/// <returns>The timestamp.</returns>
		/// <param name="dt">Dt.</param>
		public static long ToTimestamp(DateTime dt)
		{
			return (long)(dt - UnixEpoch).TotalSeconds;
		}
	}
}